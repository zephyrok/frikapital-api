{
  "swagger": "2.0",
  "info": {
    "description": "",
    "version": "1.0.0",
    "title": "Frikapital Back-end Services"
  },
  "host": "localhost:3000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Items"
    },
    {
      "name": "Orders"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/items": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Add a new item to the database",
        "description": "",
        "operationId": "createItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "description": "Item object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Item created"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get a list of items from the database",
        "description": "",
        "operationId": "getItems",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start of the item list to return",
            "required": false,
            "type": "integer"
          },
          {
            "name": "total",
            "in": "query",
            "description": "total of items in the list to return",
            "required": false,
            "type": "integer"
          },
          {
            "name": "name",
            "in": "query",
            "description": "name of the item",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type of items",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "sort by field",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "description": "direction of sorting",
            "required": false,
            "type": "string",
            "enum": [
              "asc",
              "desc"
            ]
          },
          {
            "name": "exists",
            "in": "query",
            "description": "if the field exists",
            "required": false,
            "type": "string"
          },
          {
            "name": "nonExists",
            "in": "query",
            "description": "if the field does not exists",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/items/count": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get items count",
        "description": "",
        "operationId": "getItemCount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "name of the item",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "description": "type of items",
            "required": false,
            "type": "string"
          },
          {
            "name": "exists",
            "in": "query",
            "description": "if the field exists",
            "required": false,
            "type": "string"
          },
          {
            "name": "nonExists",
            "in": "query",
            "description": "if the field does not exists",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/items/{id}": {
      "get": {
        "tags": [
          "Items"
        ],
        "summary": "Get a item for the given id",
        "description": "",
        "operationId": "getItem",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Item"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Item not found"
          }
        }
      },
      "patch": {
        "tags": [
          "Items"
        ],
        "summary": "Update existing item in database",
        "description": "",
        "operationId": "patchItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "item",
            "description": "Item object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Item"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/items/{id}/publications/mercadolibre": {
      "post": {
        "tags": [
          "Items"
        ],
        "summary": "Add a new ML publication to the item",
        "description": "",
        "operationId": "createMLPublication",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Item ID",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "publication",
            "description": "Publications",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicationMLRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Publication created"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add a new order to the database",
        "description": "",
        "operationId": "createOrder",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "order",
            "description": "Order object that needs to be added to the database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Order created"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get a list of orders from the database",
        "description": "",
        "operationId": "getOrders",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "start of the order list to return",
            "required": false,
            "type": "integer"
          },
          {
            "name": "total",
            "in": "query",
            "description": "total of orders in the list to return",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get an order for the given id",
        "description": "",
        "operationId": "getOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/orders/{id}/items": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get the list of items for the given order id",
        "description": "",
        "operationId": "getItemsByOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Item"
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add a new item to the order",
        "description": "",
        "operationId": "addItemsByOrder",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "type": "string",
            "required": true
          },
          {
            "name": "items",
            "in": "body",
            "description": "list of items ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string"
                  },
                  "quantity": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/orders/{id}/packages": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add a new package to the order",
        "description": "",
        "operationId": "addPackageByOrder",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "type": "string",
            "required": true
          },
          {
            "name": "package",
            "in": "body",
            "description": "package to be added",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Package"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    },
    "/orders/{id}/packages/{package}/items": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Add a new item to the package",
        "description": "",
        "operationId": "addItemToPackage",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Order ID",
            "type": "string",
            "required": true
          },
          {
            "name": "package",
            "in": "path",
            "description": "Package ID",
            "type": "string",
            "required": true
          },
          {
            "name": "item",
            "in": "body",
            "description": "Item to be added to package",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemByPackage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "405": {
            "description": "Invalid input"
          },
          "500": {
            "description": "Error occurred"
          }
        }
      }
    }
  },
  "definitions": {
    "Item": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "weight": {
          "type": "integer"
        },
        "brand": {
          "type": "string"
        },
        "manufacturer": {
          "type": "string"
        },
        "dimensions": {
          "$ref": "#/definitions/Dimensions"
        },
        "figureDimensions": {
          "$ref": "#/definitions/FigureDimensions"
        },
        "details": {
          "$ref": "#/definitions/FigureDetails"
        }
      }
    },
    "Dimensions": {
      "type": "object",
      "properties": {
        "height": {
          "type": "number"
        },
        "width": {
          "type": "number"
        },
        "length": {
          "type": "number"
        }
      }
    },
    "FigureDimensions": {
      "type": "object",
      "properties": {
        "height": {
          "type": "number"
        },
        "scale": {
          "type": "number"
        }
      }
    },
    "FigureDetails": {
      "type": "object",
      "properties": {
        "character": {
          "type": "string"
        },
        "serie": {
          "type": "string"
        },
        "model": {
          "type": "string"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/Cost"
        },
        "shipping": {
          "$ref": "#/definitions/Cost"
        },
        "weight": {
          "type": "integer"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Package"
          }
        }
      }
    },
    "Package": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "cost": {
          "$ref": "#/definitions/Cost"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ItemByPackage"
          }
        },
        "url": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        }
      }
    },
    "ItemByPackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "quantity": {
          "type": "integer"
        },
        "condition": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        }
      }
    },
    "Cost": {
      "type": "object",
      "properties": {
        "mxn": {
          "type": "integer"
        },
        "usd": {
          "type": "integer"
        },
        "jpy": {
          "type": "integer"
        }
      }
    },
    "PublicationMLRequest": {
      "type": "object",
      "properties": {
        "price": {
          "type": "integer"
        },
        "mercadolibreToken": {
          "type": "string"
        },
        "dropboxToken": {
          "type": "string"
        }
      }
    }
  }
}